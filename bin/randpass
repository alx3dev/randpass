#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative 'output'
require_relative 'setup_gem'

opts = Optimist.options do
  banner BANNER

  opt :num,     NUMBER_DESCRIPTION,     short: 'n', long: 'char',     type: :integer
  opt :list,    LIST_DESCRIPTION,       short: 'l', long: 'list',     type: :strings
  opt :random,  RANDOM_DESCRIPTION,     short: 'r', long: 'random',   type: :integer
  opt :path,    PATH_DESCRIPTION,       short: 'd', long: 'dir',      type: :string
  opt :clear,   CLIPBOARD_DESCRIPTION,  short: 'k', long: 'clear',    default: false
  opt :nocopy,  NO_COPY_DESCRIPTION,    short: 'c', long: 'noc',      default: false
  opt :noprint, NO_PRINT_DESCRIPTION,   short: 'p', long: 'nop',      default: false
  opt :nosave,  NO_SAVE_DESCRIPTION,    short: 's', long: 'nos',      default: false

  opt :setup,   SETUP_DESCRIPTION,      short: 'i', long: 'gem-install'

  version "Randpass version #{Randpass::VERSION}"
end

if opts[:setup]

  UserOS.gem_init
  exit(1)

else
  require_relative '../lib/randpass'
  require 'clipboard'

  (Clipboard.clear && exit(1)) if opts[:clear]

  Randpass.path = opts[:path] if opts[:path]

  Randpass.nocopy!  if opts[:nocopy]
  Randpass.nosave!  if opts[:nosave]
  Randpass.noprint! if opts[:noprint]

  if opts[:list] && opts[:num]
    Randpass.generate_list opts[:num].to_i, comments: opts[:list]
    Output[Randpass.storage]

  elsif opts[:list]
    Randpass.generate_list nil, comments: opts[:list]
    Output[Randpass.storage]

  elsif opts[:num] && opts[:random]
    Randpass.generate_list opts[:num], list: opts[:random]
    Output[Randpass.storage]

  elsif opts[:random]
    Randpass.generate_list nil, list: opts[:random]
    Output[Randpass.storage]

  elsif opts[:num]
    Output[Randpass[opts[:num]]]

  elsif ARGV.empty?
    Output[Randpass[20]]

  elsif ARGV.size == 1
    Output[Randpass[ARGV[0].to_i]]
  end

end # if opts[:setup]
