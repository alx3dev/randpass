#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative './options'

opts = Optimist.options do

  banner BANNER

  opt :setup,   SETUP_DESCRIPTION,      short: 's', long: 'gem-setup'
  opt :num,     NUMBER_DESCRIPTION,     short: 'n', long: 'no',       type: :integer
  opt :list,    LIST_DESCRIPTION,       short: 'l', long: 'list',     type: :strings
  opt :random,  RANDOM_DESCRIPTION,     short: 'r', long: 'random',   type: :integer
  opt :clear,   CLIPBOARD_DESCRIPTION,  short: 'c', long: 'clear',    default: false
  opt :nocopy,  NO_COPY_DESCRIPTION,    short: 'd', long: 'noc',      default: false
  opt :noprint, NO_PRINT_DESCRIPTION,   short: 'o', long: 'nop',      default: false

  version "Randpass #{Randpass::VERSION}"
end

if opts[:setup]

  dir = File.expand_path(__FILE__).gsub('/bin/randpass', '')
  Dir.chdir dir
  system 'bin/setup'
  exit(1)

else
  require_relative '../lib/randpass'
  require 'clipboard'


  (Clipboard.clear && exit(1)) if opts[:clear]

  Randpass.nocopy! if opts[:nocopy]
  Randpass.noprint! if opts[:noprint]

  case
  when opts[:num] && opts[:random]
    Randpass.generate_list opts[:num], list: opts[:random]
    Output[Randpass.storage]
    exit(1)

  when opts[:random]
    Randpass.generate_list nil, list: opts[:random]
    Output[Randpass.storage]
    exit(1)

  when opts[:list] && opts[:num]
    Randpass.generate_list opts[:num].to_i, comments: opts[:list]
    Output[Randpass.storage]
    exit(1)

  when opts[:list]
    Randpass.generate_list nil, comments: opts[:list]
    Output[Randpass.storage]
    exit(1)

  when ARGV.empty?
    Output[Randpass[20]] && exit(1)
    exit(1)

  when ARGV.size == 1
    Output[Randpass[ARGV[0].to_i]]
    exit(1)
  end
end